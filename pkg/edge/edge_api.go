// Code generated by tutone: DO NOT EDIT
package edge

import (
	"github.com/newrelic/newrelic-client-go/pkg/errors"
)

// Create one or more trace observers, as defined by the `CreateTraceObserverInput`. Currently, only one trace observer can be created per provider region.
func (a *Edge) EdgeCreateTraceObserver(
	accountID int,
	traceObserverConfigs EdgeCreateTraceObserverInput,
) (*EdgeCreateTraceObserverResponses, error) {

	resp := edgeCreateTraceObserverResponse{}
	vars := map[string]interface{}{
		"accountId":            accountID,
		"traceObserverConfigs": traceObserverConfigs,
	}

	if err := a.client.NerdGraphQuery(EdgeCreateTraceObserverMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.EdgeCreateTraceObserverResponses, nil
}

type edgeCreateTraceObserverResponse struct {
	EdgeCreateTraceObserverResponses EdgeCreateTraceObserverResponses `json:"EdgeCreateTraceObserver"`
}

const EdgeCreateTraceObserverMutation = `mutation(
	$accountId: Int!,
	$traceObserverConfigs: EdgeCreateTraceObserverInput!,
) { EdgeCreateTraceObserver(
	accountId: $accountId,
	traceObserverConfigs: $traceObserverConfigs,
) {
	
} }`

func (a *Edge) EdgeDeleteTraceObservers(
	accountID int,
	traceObserverConfigs EdgeDeleteTraceObserverInput,
) (*EdgeDeleteTraceObserverResponses, error) {

	resp := edgeDeleteTraceObserversResponse{}
	vars := map[string]interface{}{
		"accountId":            accountID,
		"traceObserverConfigs": traceObserverConfigs,
	}

	if err := a.client.NerdGraphQuery(EdgeDeleteTraceObserversMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.EdgeDeleteTraceObserverResponses, nil
}

type edgeDeleteTraceObserversResponse struct {
	EdgeDeleteTraceObserverResponses EdgeDeleteTraceObserverResponses `json:"EdgeDeleteTraceObservers"`
}

const EdgeDeleteTraceObserversMutation = `mutation(
	$accountId: Int!,
	$traceObserverConfigs: EdgeDeleteTraceObserverInput!,
) { EdgeDeleteTraceObservers(
	accountId: $accountId,
	traceObserverConfigs: $traceObserverConfigs,
) {
	
} }`

// Update one or more trace observers, as defined by the `UpdateTraceObserverInput`.
func (a *Edge) EdgeUpdateTraceObservers(
	accountID int,
	traceObserverConfigs EdgeUpdateTraceObserverInput,
) (*EdgeUpdateTraceObserverResponses, error) {

	resp := edgeUpdateTraceObserversResponse{}
	vars := map[string]interface{}{
		"accountId":            accountID,
		"traceObserverConfigs": traceObserverConfigs,
	}

	if err := a.client.NerdGraphQuery(EdgeUpdateTraceObserversMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.EdgeUpdateTraceObserverResponses, nil
}

type edgeUpdateTraceObserversResponse struct {
	EdgeUpdateTraceObserverResponses EdgeUpdateTraceObserverResponses `json:"EdgeUpdateTraceObservers"`
}

const EdgeUpdateTraceObserversMutation = `mutation(
	$accountId: Int!,
	$traceObserverConfigs: EdgeUpdateTraceObserverInput!,
) { EdgeUpdateTraceObservers(
	accountId: $accountId,
	traceObserverConfigs: $traceObserverConfigs,
) {
	
} }`

// Lists the existing trace observers for this account family.
func (a *Edge) QueryTraceObservers(
	accountID int,
	iDs []int,
) ([]EdgeTraceObserver, error) {

	resp := traceObserversResponse{}
	vars := map[string]interface{}{
		"accountID": accountID,
		"ids":       iDs,
	}

	if err := a.client.NerdGraphQuery(getTraceObserversQuery, vars, &resp); err != nil {
		return nil, err
	}

	if len(resp.Actor.Account.Edge.Tracing.TraceObservers) == 0 {
		return nil, errors.NewNotFound("")
	}

	return resp.Actor.Account.Edge.Tracing.TraceObservers, nil
}

const getTraceObserversQuery = `query(
	$accountID: Int!,
) { actor { account(id: $accountID) { edge { tracing { traceObservers(
) {
	endpoints {
		agent {
			host
			port
		}
		endpointType
		https {
			host
			port
			url
		}
		status
	}
	id
	monitoringAccountId
	name
	providerRegion
	status
} } } } } }`
